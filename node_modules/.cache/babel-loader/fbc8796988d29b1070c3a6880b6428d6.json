{"ast":null,"code":"// [] is representing my Store i.e. data\n// When dealing with multiple action types\nimport * as actions from \"./actions/ActionTypes\";\nimport posts from \"./UserPosts\";\nimport users from \"../redux/Users\";\nexport const initialState = {\n  users: users,\n  posts: posts,\n  name: '',\n  loggedIn: false,\n  comment: true,\n  photo: true\n};\n\nconst reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.USER_ADDED:\n      return [...state, {\n        payload: action.payload.item,\n        new: true\n      }];\n\n    case actions.USER_LOGIN:\n      return state.map(user => user.item !== action.payload.item ? user : { ...user,\n        login: false\n      });\n\n    case actions.USER_LOGOUT:\n      return state.map(user => user.item !== action.payload.item ? user : { ...user,\n        login: true\n      });\n\n    case actions.USER_REMOVED:\n      return this.state.filter(user => user.item !== action.payload.item);\n\n    case actions.ADD_COMMENT:\n      return state.map(user => user.item !== action.payload.item ? user : { ...user,\n        comment: true\n      });\n\n    case actions.REMOVE_COMMENT:\n      return state.map(user => user.item !== action.payload.item ? user : { ...user,\n        comment: false\n      });\n\n    case actions.ADD_PHOTO:\n      return state.map(user => user.item !== action.payload.item ? user : { ...user,\n        photo: true\n      });\n\n    case actions.REMOVE_PHOTO:\n      return state.map(user => user.item !== action.payload.item ? user : { ...user,\n        photo: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducers;","map":{"version":3,"sources":["/Users/groovequeen/Desktop/photo_app/src/redux/Reducers.js"],"names":["actions","posts","users","initialState","name","loggedIn","comment","photo","reducers","state","action","type","USER_ADDED","payload","item","new","USER_LOGIN","map","user","login","USER_LOGOUT","USER_REMOVED","filter","ADD_COMMENT","REMOVE_COMMENT","ADD_PHOTO","REMOVE_PHOTO"],"mappings":"AAAA;AACA;AACA,OAAO,KAAKA,OAAZ,MAAyB,uBAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BD,EAAAA,KAAK,EAAEA,KADmB;AAE1BD,EAAAA,KAAK,EAAEA,KAFmB;AAG1BG,EAAAA,IAAI,EAAC,EAHqB;AAI1BC,EAAAA,QAAQ,EAAE,KAJgB;AAK1BC,EAAAA,OAAO,EAAE,IALiB;AAM1BC,EAAAA,KAAK,EAAE;AANmB,CAArB;;AAUP,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,OAAO,CAACY,UAAb;AACE,aAAO,CACL,GAAGH,KADE,EAEL;AACEI,QAAAA,OAAO,EAAEH,MAAM,CAACG,OAAP,CAAeC,IAD1B;AAEEC,QAAAA,GAAG,EAAE;AAFP,OAFK,CAAP;;AAQF,SAAKf,OAAO,CAACgB,UAAb;AACE,aAAOP,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACJ,IAAL,KAAcJ,MAAM,CAACG,OAAP,CAAeC,IAA7B,GAAoCI,IAApC,GAA2C,EAAE,GAAGA,IAAL;AAAWC,QAAAA,KAAK,EAAE;AAAlB,OADtC,CAAP;;AAGF,SAAKnB,OAAO,CAACoB,WAAb;AACE,aAAOX,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACJ,IAAL,KAAcJ,MAAM,CAACG,OAAP,CAAeC,IAA7B,GAAoCI,IAApC,GAA2C,EAAE,GAAGA,IAAL;AAAWC,QAAAA,KAAK,EAAE;AAAlB,OADtC,CAAP;;AAGF,SAAKnB,OAAO,CAACqB,YAAb;AACE,aAAO,KAAKZ,KAAL,CAAWa,MAAX,CAAmBJ,IAAD,IAAUA,IAAI,CAACJ,IAAL,KAAcJ,MAAM,CAACG,OAAP,CAAeC,IAAzD,CAAP;;AAEF,SAAKd,OAAO,CAACuB,WAAb;AACE,aAAOd,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACJ,IAAL,KAAcJ,MAAM,CAACG,OAAP,CAAeC,IAA7B,GAAoCI,IAApC,GAA2C,EAAE,GAAGA,IAAL;AAAWZ,QAAAA,OAAO,EAAE;AAApB,OADtC,CAAP;;AAIF,SAAKN,OAAO,CAACwB,cAAb;AACE,aAAOf,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACJ,IAAL,KAAcJ,MAAM,CAACG,OAAP,CAAeC,IAA7B,GAAoCI,IAApC,GAA2C,EAAE,GAAGA,IAAL;AAAWZ,QAAAA,OAAO,EAAE;AAApB,OADtC,CAAP;;AAGF,SAAKN,OAAO,CAACyB,SAAb;AACE,aAAOhB,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACJ,IAAL,KAAcJ,MAAM,CAACG,OAAP,CAAeC,IAA7B,GAAoCI,IAApC,GAA2C,EAAE,GAAGA,IAAL;AAAWX,QAAAA,KAAK,EAAE;AAAlB,OADtC,CAAP;;AAGF,SAAKP,OAAO,CAAC0B,YAAb;AACE,aAAOjB,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACJ,IAAL,KAAcJ,MAAM,CAACG,OAAP,CAAeC,IAA7B,GAAoCI,IAApC,GAA2C,EAAE,GAAGA,IAAL;AAAWX,QAAAA,KAAK,EAAE;AAAlB,OADtC,CAAP;;AAGF;AACE,aAAOE,KAAP;AAvCJ;AAyCD,CA1CD;;AA2CA,eAAeD,QAAf","sourcesContent":["// [] is representing my Store i.e. data\n// When dealing with multiple action types\nimport * as actions from \"./actions/ActionTypes\";\nimport posts from \"./UserPosts\";\nimport users from \"../redux/Users\";\n\nexport const initialState = {\n  users: users,\n  posts: posts,\n  name:'',\n  loggedIn: false,\n  comment: true,\n  photo: true,\n\n};\n\nconst reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.USER_ADDED:\n      return [\n        ...state,\n        {\n          payload: action.payload.item,\n          new: true,\n        },\n      ];\n\n    case actions.USER_LOGIN:\n      return state.map((user) =>\n        user.item !== action.payload.item ? user : { ...user, login: false }\n      );\n    case actions.USER_LOGOUT:\n      return state.map((user) =>\n        user.item !== action.payload.item ? user : { ...user, login: true }\n      );\n    case actions.USER_REMOVED:\n      return this.state.filter((user) => user.item !== action.payload.item);\n\n    case actions.ADD_COMMENT:\n      return state.map((user) =>\n        user.item !== action.payload.item ? user : { ...user, comment: true }\n      );\n\n    case actions.REMOVE_COMMENT:\n      return state.map((user) =>\n        user.item !== action.payload.item ? user : { ...user, comment: false }\n      );\n    case actions.ADD_PHOTO:\n      return state.map((user) =>\n        user.item !== action.payload.item ? user : { ...user, photo: true }\n      );\n    case actions.REMOVE_PHOTO:\n      return state.map((user) =>\n        user.item !== action.payload.item ? user : { ...user, photo: true }\n      );\n    default:\n      return state;\n  }\n}\nexport default reducers"]},"metadata":{},"sourceType":"module"}