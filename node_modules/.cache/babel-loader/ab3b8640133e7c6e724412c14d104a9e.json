{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/groovequeen/Desktop/photo_app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './redux/store';\nimport './index.css'; // import { userAdded, userLogin } from './redux/actions/actions'\n\nimport App from './pages/App/App'; // store.dispatch(userAdded(\"User1\"));\n// store.dispatch(userLogin(1));\n// subscribe gives updates, getState gets 'new' status maintaining functions in reducer pure\n\nconst unsubscribe = store.subscribe(() => {\n  console.log(\"Store changed!\", store.getState());\n}); // when user \"registers\" we dispatch an action, 'store.js' will call reducer, give current state and action,\n// based on type of action we will get the NEW state, being 'New User'\n\nstore.dispatch({\n  type: actions.USER_ADDED,\n  payload: {\n    description: \"User1\"\n  }\n}); // prevents memory leaks\n\nunsubscribe();\nstore.dispatch({\n  type: actions.USER_REMOVED,\n  payload: {\n    id: 1\n  }\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 35,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/groovequeen/Desktop/photo_app/src/index.js"],"names":["React","ReactDOM","store","App","unsubscribe","subscribe","console","log","getState","dispatch","type","actions","USER_ADDED","payload","description","USER_REMOVED","id","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAO,aAAP,C,CACA;;AACA,OAAOC,GAAP,MAAgB,iBAAhB,C,CAEA;AACA;AAEA;;AACA,MAAMC,WAAW,GAAGF,KAAK,CAACG,SAAN,CAAgB,MAAM;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,KAAK,CAACM,QAAN,EAA9B;AACD,CAFmB,CAApB,C,CAIA;AACA;;AACAN,KAAK,CAACO,QAAN,CAAe;AACbC,EAAAA,IAAI,EAAEC,OAAO,CAACC,UADD;AAEbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,WAAW,EAAC;AADL;AAFI,CAAf,E,CAOA;;AACAV,WAAW;AACXF,KAAK,CAACO,QAAN,CAAe;AACbC,EAAAA,IAAI,EAAEC,OAAO,CAACI,YADD;AAEbF,EAAAA,OAAO,EAAC;AACNG,IAAAA,EAAE,EAAE;AADE;AAFK,CAAf;AAOAf,QAAQ,CAACgB,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './redux/store'\nimport './index.css';\n// import { userAdded, userLogin } from './redux/actions/actions'\nimport App from './pages/App/App';\n\n// store.dispatch(userAdded(\"User1\"));\n// store.dispatch(userLogin(1));\n\n// subscribe gives updates, getState gets 'new' status maintaining functions in reducer pure\nconst unsubscribe = store.subscribe(() => {\n  console.log(\"Store changed!\", store.getState());\n})\n\n// when user \"registers\" we dispatch an action, 'store.js' will call reducer, give current state and action,\n// based on type of action we will get the NEW state, being 'New User'\nstore.dispatch({\n  type: actions.USER_ADDED,\n  payload: {\n    description:\"User1\"\n  }\n});\n\n// prevents memory leaks\nunsubscribe();\nstore.dispatch({\n  type: actions.USER_REMOVED,\n  payload:{\n    id: 1\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"]},"metadata":{},"sourceType":"module"}