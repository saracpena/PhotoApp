{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; // storing user information\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null\n  },\n  reducers: {\n    login: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n    }\n  }\n});\nexport const {\n  login,\n  logout,\n  incrementByAmount\n} = userSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = amount => dispatch => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectUser = state => state.user.user;\nexport default userSlice.reducer; //! Redux:\n// REWATCH 2:30 REDUX BROKEN DOWN! Take notes and articulate this! i.e.SLICE","map":{"version":3,"sources":["/Users/groovequeen/Desktop/photoapp-clone/src/features/userSlice.js"],"names":["createSlice","userSlice","name","initialState","user","reducers","login","state","action","value","payload","logout","incrementByAmount","actions","selectUser","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;AACnCE,EAAAA,IAAI,EAAE,MAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE;AADM,GAFqB;AAKnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxB;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACE,KAAN,GAAcD,MAAM,CAACE,OAArB;AACD,KAPO;AAQRC,IAAAA,MAAM,EAAGJ,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACH,IAAN,GAAa,IAAb;AACD;AAVO;AALyB,CAAD,CAA7B;AAmBP,OAAO,MAAM;AAAEE,EAAAA,KAAF;AAASK,EAAAA,MAAT;AAAiBC,EAAAA;AAAjB,IAAuCX,SAAS,CAACY,OAAvD,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAGP,KAAK,IAAIA,KAAK,CAACH,IAAN,CAAWA,IAAvC;AAEP,eAAeH,SAAS,CAACc,OAAzB,C,CAEA;AACA","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// storing user information\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout, incrementByAmount } = userSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n// export const incrementAsync = amount => dispatch => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n\r\n//! Redux:\r\n// REWATCH 2:30 REDUX BROKEN DOWN! Take notes and articulate this! i.e.SLICE\r\n"]},"metadata":{},"sourceType":"module"}