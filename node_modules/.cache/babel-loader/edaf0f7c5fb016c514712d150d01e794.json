{"ast":null,"code":"// [] is representing my Store i.e. data\n// When dealing with multiple action types\nimport * as actions from \"./ActionTypes\";\nimport UserPosts from \"./UserPosts\";\nimport users from \"../redux/Users\";\nexport const initialState = {\n  users: users,\n  posts: posts\n};\nexport default function reducer(state = [], action) {\n  switch (action.type) {\n    case actions.USER_ADDED:\n      return [...state, {\n        payload: action.payload.item,\n        new: true\n      }];\n\n    case actions.USER_LOGIN:\n      return state.map(user => user.item !== action.payload.id ? user : { ...user,\n        login: false\n      });\n\n    case actions.USER_LOGOUT:\n      return state.map(user => user.id !== action.payload.id ? user : { ...user,\n        login: true\n      });\n\n    case actions.USER_REMOVED:\n      return store.filter(user => user.item !== action.payload.item);\n\n    case actions.ADD_COMMENT:\n      return state.map(user => user.id !== action.payload.id ? user : { ...user,\n        login: true\n      });\n    //add the updated code later\n    //return the updated state after adding a comment\n    //the action is bringing here the data which needs to be updated -\n    //this comment needs to be added in the pictureData.js - pictures.comments - learn the syntax and the procedure\n    // return{\n    //     pictures[].comments: [...state.pictures[].comments, action.payload];\n    // }\n\n    case actions.REMOVE_COMMENT:\n      return state.map(user => user.id !== action.payload.id ? user : { ...user,\n        login: true\n      });\n\n    case actions.ADD_PHOTO:\n      return state.map(user => user.id !== action.payload.id ? user : { ...user,\n        login: true\n      });\n\n    case actions.REMOVE_PHOTO:\n      return state.map(user => user.id !== action.payload.id ? user : { ...user,\n        login: true\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/groovequeen/Desktop/photo_app/src/redux/Reducers.js"],"names":["actions","UserPosts","users","initialState","posts","reducer","state","action","type","USER_ADDED","payload","item","new","USER_LOGIN","map","user","id","login","USER_LOGOUT","USER_REMOVED","store","filter","ADD_COMMENT","REMOVE_COMMENT","ADD_PHOTO","REMOVE_PHOTO"],"mappings":"AAAA;AACA;AACA,OAAO,KAAKA,OAAZ,MAAyB,eAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BD,EAAAA,KAAK,EAAEA,KADmB;AAE1BE,EAAAA,KAAK,EAAEA;AAFmB,CAArB;AAKP,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAG,EAAzB,EAA6BC,MAA7B,EAAqC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,OAAO,CAACS,UAAb;AACE,aAAO,CACL,GAAGH,KADE,EAEL;AACEI,QAAAA,OAAO,EAAEH,MAAM,CAACG,OAAP,CAAeC,IAD1B;AAEEC,QAAAA,GAAG,EAAE;AAFP,OAFK,CAAP;;AAQF,SAAKZ,OAAO,CAACa,UAAb;AACE,aAAOP,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACJ,IAAL,KAAcJ,MAAM,CAACG,OAAP,CAAeM,EAA7B,GAAkCD,IAAlC,GAAyC,EAAE,GAAGA,IAAL;AAAWE,QAAAA,KAAK,EAAE;AAAlB,OADpC,CAAP;;AAGF,SAAKjB,OAAO,CAACkB,WAAb;AACE,aAAOZ,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACG,OAAP,CAAeM,EAA3B,GAAgCD,IAAhC,GAAuC,EAAE,GAAGA,IAAL;AAAWE,QAAAA,KAAK,EAAE;AAAlB,OADlC,CAAP;;AAGF,SAAKjB,OAAO,CAACmB,YAAb;AACE,aAAOC,KAAK,CAACC,MAAN,CAAcN,IAAD,IAAUA,IAAI,CAACJ,IAAL,KAAcJ,MAAM,CAACG,OAAP,CAAeC,IAApD,CAAP;;AAEF,SAAKX,OAAO,CAACsB,WAAb;AACE,aAAOhB,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACG,OAAP,CAAeM,EAA3B,GAAgCD,IAAhC,GAAuC,EAAE,GAAGA,IAAL;AAAWE,QAAAA,KAAK,EAAE;AAAlB,OADlC,CAAP;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKjB,OAAO,CAACuB,cAAb;AACE,aAAOjB,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACG,OAAP,CAAeM,EAA3B,GAAgCD,IAAhC,GAAuC,EAAE,GAAGA,IAAL;AAAWE,QAAAA,KAAK,EAAE;AAAlB,OADlC,CAAP;;AAGF,SAAKjB,OAAO,CAACwB,SAAb;AACE,aAAOlB,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACG,OAAP,CAAeM,EAA3B,GAAgCD,IAAhC,GAAuC,EAAE,GAAGA,IAAL;AAAWE,QAAAA,KAAK,EAAE;AAAlB,OADlC,CAAP;;AAGF,SAAKjB,OAAO,CAACyB,YAAb;AACE,aAAOnB,KAAK,CAACQ,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACG,OAAP,CAAeM,EAA3B,GAAgCD,IAAhC,GAAuC,EAAE,GAAGA,IAAL;AAAWE,QAAAA,KAAK,EAAE;AAAlB,OADlC,CAAP;;AAGF;AACE,aAAOX,KAAP;AA7CJ;AA+CD","sourcesContent":["// [] is representing my Store i.e. data\n// When dealing with multiple action types\nimport * as actions from \"./ActionTypes\";\nimport UserPosts from \"./UserPosts\";\nimport users from \"../redux/Users\";\n\nexport const initialState = {\n  users: users,\n  posts: posts,\n};\n\nexport default function reducer(state = [], action) {\n  switch (action.type) {\n    case actions.USER_ADDED:\n      return [\n        ...state,\n        {\n          payload: action.payload.item,\n          new: true,\n        },\n      ];\n\n    case actions.USER_LOGIN:\n      return state.map((user) =>\n        user.item !== action.payload.id ? user : { ...user, login: false }\n      );\n    case actions.USER_LOGOUT:\n      return state.map((user) =>\n        user.id !== action.payload.id ? user : { ...user, login: true }\n      );\n    case actions.USER_REMOVED:\n      return store.filter((user) => user.item !== action.payload.item);\n\n    case actions.ADD_COMMENT:\n      return state.map((user) =>\n        user.id !== action.payload.id ? user : { ...user, login: true }\n      );\n    //add the updated code later\n    //return the updated state after adding a comment\n    //the action is bringing here the data which needs to be updated -\n    //this comment needs to be added in the pictureData.js - pictures.comments - learn the syntax and the procedure\n    // return{\n    //     pictures[].comments: [...state.pictures[].comments, action.payload];\n    // }\n    case actions.REMOVE_COMMENT:\n      return state.map((user) =>\n        user.id !== action.payload.id ? user : { ...user, login: true }\n      );\n    case actions.ADD_PHOTO:\n      return state.map((user) =>\n        user.id !== action.payload.id ? user : { ...user, login: true }\n      );\n    case actions.REMOVE_PHOTO:\n      return state.map((user) =>\n        user.id !== action.payload.id ? user : { ...user, login: true }\n      );\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}